#!/usr/bin/ash

run_earlyhook() {
    if [ -n "${ip}" ]; then
        # Module autoloading
        modprobe dm_crypt 2>/dev/null
    fi
}

run_hook() {
    [ -z "${arch}" ] && arch="$(uname -m)"
    [ -z "${copytoram}" ] && copytoram="n"
    [ -z "${copytoram_size}" ] && copytoram_size="75%"
    [ -z "${copytoram_mnt}" ] && copytoram_mnt="/run/pxe/copytoram"
    [ -z "${boot_mnt}" ] && boot_mnt="/run/pxe/bootmnt"
    [ -z "${root_mnt}" ] && root_mnt="/run/pxe/rootmnt"
    [ -z "${bootif_dev}" ] && bootif_dev=""
    [ -z "${bootif_mac}" ] && bootif_mac=""

    local i net_mac
    # defined by ipconfig in /tmp/net-*.conf
    local DEVICE IPV4ADDR IPV4BROADCAST IPV4NETMASK IPV4GATEWAY IPV4DNS0 IPV4DNS1
    local HOSTNAME DNSDOMAIN NISDOMAIN ROOTSERVER ROOTPATH filename

    msg ":: Received config ip='${ip}', BOOTIF='${BOOTIF}'"

    if [ -n "${ip}" ]; then
        if [ -n "${BOOTIF}" ]; then
            bootif_mac="${BOOTIF#01-}"
            bootif_mac="${bootif_mac//-/:}"
            for i in /sys/class/net/*/address; do
                read -r net_mac <"${i}"
                if [ "${bootif_mac}" = "${net_mac}" ]; then
                    bootif_dev=${i#/sys/class/net/}
                    bootif_dev=${bootif_dev%/address}
                    break
                fi
            done
            if [ "${ip}" = "dhcp" ]; then
                ip=":::::${bootif_dev}:dhcp"
            else
                ip="${ip}::${bootif_dev}"
            fi
        fi

        if ipconfig -t 60 "ip=${ip}"; then
            msg ":: Configured network with '${ip}'"
        else
            echo "!! ERROR: no network configured to boot pxe with"
            launch_interactive_shell
        fi

        for conf in /tmp/net-*.conf; do
            [ -f "$conf" ] && source "$conf"
        done

        export pxeserver="${ROOTSERVER}"
        msg ":: Configured pxe server '${pxeserver}'"
    fi

    # set mount handler for pxe boot
    export mount_handler="pxe_mount_handler"
}

run_latehook() {
    local curif netdev
    if [ -n "${ip}" ]; then
        if [ "${copytoram}" = "y" ]; then
            for curif in /sys/class/net/*; do
                netdev=${curif#/sys/class/net/}
                ip addr flush dev "${netdev}"
                ip link set "${netdev}" down
            done
        fi
    fi
}

# This function is called normally from init script, but it will be called
# chained with the other mount handlers.
# args: /path/to/newroot
pxe_mount_handler() {
    local newroot="${1}"
    local boot_img="${boot_mnt}/arch/${arch}/pxeboot.img"
    local copytoram_img="${copytoram_mnt}/pxeboot.img"
    local copytoram_work="${copytoram_mnt}/workdir"
    local copytoram_upper="${copytoram_mnt}/upperdir"
    local encrypt_name="pxeboot"
    local encrypt_mnt="/dev/mapper/${encrypt_name}"
    
    # 1st: check everything
    if ! mountpoint -q "${boot_mnt}"; then
        echo "!! ERROR: no pxe mount point '${boot_mnt}' found"
        launch_interactive_shell
    fi
    if [ ! -e "${boot_img}" ]; then
        echo "!! ERROR: no root filesystem '${boot_img}' found"
        launch_interactive_shell
    fi

    # 2nd: when copy to RAM is used, prepare everything and copy the image
    if [ "${copytoram}" = "y" ]; then
        if ! mountpoint -q "${copytoram_mnt}"; then
            msg ":: Mount ${copytoram_mnt} (tmpfs) filesystem, size=${copytoram_size}"
            mount --mkdir -t tmpfs -o "size=${copytoram_size}",mode=0755 copytoram "${copytoram_mnt}"
        fi

        msg ":: Copy image to RAM"
        if command -v dd >/dev/null 2>&1; then
            echo ""
            (dd if="${boot_img}" of="${copytoram_img}" bs=1M iflag=fullblock status=progress)
            local rc=$?
        elif command -v pv >/dev/null 2>&1; then
            echo ""
            (pv "${boot_img}" >"${copytoram_img}")
            local rc=$?
        else
            (cp -- "${boot_img}" "${copytoram_img}")
            local rc=$?
            msg ":: Copy to '${boot_img}' finished"
        fi

        if [ "$rc" != 0 ]; then
            echo "!! ERROR: copy '${boot_img}' to '${copytoram_img}'"
            launch_interactive_shell
        fi

        boot_img="${copytoram_img}"
    fi

    # 3rd: prepare the loop device for the image to be used as a mount point
    local img_loopdev="$(losetup --find --show --read-only -- "${boot_img}")"

    # 4th: unlock the loop device when encrypted
    if cryptsetup isLuks "${img_loopdev}" >/dev/null 2>&1; then
        msg ":: Open encrypted '${img_loopdev}' to '${encrypt_mnt}'"
        while ! cryptsetup open "${img_loopdev}" ${encrypt_name}; do
            sleep 3;
        done
        img_loopdev="${encrypt_mnt}"
    fi

    # 5th: mount the loop device to the root mount point
    msg ":: Mount '${img_loopdev}' to '${root_mnt}'"
    if ! mount --mkdir -o defaults -r "${img_loopdev}" "${root_mnt}"; then
        echo "!! ERROR: failed to mount '${img_loopdev}'"
        launch_interactive_shell
    fi

    # 6th: mount the overlay filesystem on top of the loop device to allow write access
    #      (when no copytoram was set, a tmpfs is mounted regardless)
    if ! mountpoint -q "${copytoram_mnt}"; then
        msg ":: Mount ${copytoram_mnt} (tmpfs) filesystem, size=${copytoram_size}"
        mount --mkdir -t tmpfs -o "size=${copytoram_size}",mode=0755 copytoram "${copytoram_mnt}"
    fi
    msg ":: Mount new root filesystem '${newroot}'"
    mkdir -p "${copytoram_work}" "${copytoram_upper}"
    if ! mount -t overlay -o "lowerdir=${root_mnt},upperdir=${copytoram_upper},workdir=${copytoram_work}" rootfs "${newroot}"; then
        echo "!! ERROR: failed to mount '${newroot}'"
        launch_interactive_shell
    fi

    # 7th: when copy to RAM is used, the original boot mount is no longer needed
    if [ "${copytoram}" = "y" ]; then
        umount -d "${boot_mnt}"
        rmdir "${boot_mnt}"
    fi

    # 8th: when no copy to RAM is used, the booting network card has to keep it's settings
    if [ "${copytoram}" = "n" ]; then
        if [ -z "${bootif_dev}" ]; then
            echo "!! ERROR: when copy to RAM is not used, a boot network device needs to be present"
            launch_interactive_shell
        fi
        mkdir -p "${newroot}/etc/systemd/network"
        msg ":: Network config for device '${bootif_dev}' ('${bootif_mac}')"
        tee "${newroot}/etc/systemd/network/10-${bootif_dev}.network" <<EOF
[Match]
MACAddress=${bootif_mac}

[Network]
KeepConfiguration=yes
DHCP=yes
MulticastDNS=yes

[DHCPv4]
RouteMetric=10

[IPv6AcceptRA]
RouteMetric=10

[DHCPPrefixDelegation]
RouteMetric=10

[IPv6Prefix]
RouteMetric=10
EOF
        msg ":: Link config for device '${bootif_dev}' ('${bootif_mac}')"
        tee "${newroot}/etc/systemd/network/10-${bootif_dev}.link" <<EOF
[Match]
MACAddress=${bootif_mac}

[Link]
NamePolicy=keep
EOF
    fi
}
